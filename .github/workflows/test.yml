name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.12]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: devpocket_test
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6380:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y redis-tools postgresql-client

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up environment variables
      run: |
        echo "ENVIRONMENT=test" >> $GITHUB_ENV
        echo "TESTING=true" >> $GITHUB_ENV
        echo "APP_DEBUG=true" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://test:test@localhost:5433/devpocket_test" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6380" >> $GITHUB_ENV
        echo "JWT_SECRET_KEY=test_secret_key_for_testing_only" >> $GITHUB_ENV
        echo "JWT_ALGORITHM=HS256" >> $GITHUB_ENV
        echo "JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30" >> $GITHUB_ENV
        echo "OPENROUTER_API_BASE_URL=http://localhost:8001/mock" >> $GITHUB_ENV
        echo "LOG_LEVEL=INFO" >> $GITHUB_ENV

    - name: Wait for services
      run: |
        while ! pg_isready -h localhost -p 5433 -U test; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        
        while ! redis-cli -h localhost -p 6380 ping; do
          echo "Waiting for Redis..."
          sleep 2
        done
        
        echo "Services are ready!"

    - name: Run database migrations
      run: |
        alembic upgrade head
      env:
        DATABASE_URL: postgresql://test:test@localhost:5433/devpocket_test

    - name: Run linting
      run: |
        black --check .
        ruff check .
        mypy app/ --ignore-missing-imports

    - name: Run security scan
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true

    - name: Run Unit Tests
      run: |
        echo "::group::Unit Tests"
        pytest tests/test_auth/ tests/test_database/ tests/test_api/ \
          --cov=app \
          --cov-report=term-missing \
          --cov-report=xml:unit-coverage.xml \
          --cov-report=html:unit-htmlcov \
          --junitxml=unit-pytest-report.xml \
          --html=unit-pytest-report.html \
          --self-contained-html \
          -v \
          --tb=short \
          --durations=10 \
          --randomly-seed=12345 \
          -m "not integration and not performance and not external"
        echo "::endgroup::"
      env:
        DATABASE_URL: postgresql://test:test@localhost:5433/devpocket_test
        REDIS_URL: redis://localhost:6380

    - name: Run Service Layer Tests
      run: |
        echo "::group::Service Layer Tests"
        pytest tests/test_ssh/ tests/test_ai/ tests/test_sync/ \
          --cov=app \
          --cov-append \
          --cov-report=term-missing \
          --cov-report=xml:service-coverage.xml \
          --cov-report=html:service-htmlcov \
          --junitxml=service-pytest-report.xml \
          --html=service-pytest-report.html \
          --self-contained-html \
          -v \
          --tb=short \
          --durations=10 \
          --randomly-seed=12345 \
          -m "not integration and not performance and not external"
        echo "::endgroup::"
      env:
        DATABASE_URL: postgresql://test:test@localhost:5433/devpocket_test
        REDIS_URL: redis://localhost:6380

    - name: Run WebSocket Tests
      run: |
        echo "::group::WebSocket Tests"
        pytest tests/test_websocket/ \
          --cov=app \
          --cov-append \
          --cov-report=term-missing \
          --cov-report=xml:websocket-coverage.xml \
          --cov-report=html:websocket-htmlcov \
          --junitxml=websocket-pytest-report.xml \
          --html=websocket-pytest-report.html \
          --self-contained-html \
          -v \
          --tb=short \
          --durations=10 \
          --randomly-seed=12345 \
          -m "not integration and not performance and not external"
        echo "::endgroup::"
      env:
        DATABASE_URL: postgresql://test:test@localhost:5433/devpocket_test
        REDIS_URL: redis://localhost:6380

    - name: Run Error Handling Tests
      run: |
        echo "::group::Error Handling Tests"
        pytest tests/test_error_handling/ \
          --cov=app \
          --cov-append \
          --cov-report=term-missing \
          --cov-report=xml:error-coverage.xml \
          --cov-report=html:error-htmlcov \
          --junitxml=error-pytest-report.xml \
          --html=error-pytest-report.html \
          --self-contained-html \
          -v \
          --tb=short \
          --durations=10 \
          --randomly-seed=12345 \
          -m "not integration and not performance and not external"
        echo "::endgroup::"
      env:
        DATABASE_URL: postgresql://test:test@localhost:5433/devpocket_test
        REDIS_URL: redis://localhost:6380

    - name: Run Script Tests
      run: |
        echo "::group::Script Tests"
        pytest tests/test_scripts/ \
          --cov=app \
          --cov-append \
          --cov-report=term-missing \
          --cov-report=xml:script-coverage.xml \
          --cov-report=html:script-htmlcov \
          --junitxml=script-pytest-report.xml \
          --html=script-pytest-report.html \
          --self-contained-html \
          -v \
          --tb=short \
          --durations=10 \
          --randomly-seed=12345 \
          -m "not integration and not performance and not external"
        echo "::endgroup::"
      env:
        DATABASE_URL: postgresql://test:test@localhost:5433/devpocket_test
        REDIS_URL: redis://localhost:6380

    - name: Run Basic Coverage Tests
      run: |
        echo "::group::Basic Coverage Tests"
        pytest tests/test_basic_coverage.py tests/test_app_coverage.py \
          --cov=app \
          --cov-append \
          --cov-report=term-missing \
          --cov-report=xml:coverage.xml \
          --cov-report=html:htmlcov \
          --cov-fail-under=30 \
          --junitxml=pytest-report.xml \
          --html=pytest-report.html \
          --self-contained-html \
          -v \
          --tb=short \
          --durations=10 \
          --randomly-seed=12345 \
          -m "not integration and not performance and not external"
        echo "::endgroup::"
      env:
        DATABASE_URL: postgresql://test:test@localhost:5433/devpocket_test
        REDIS_URL: redis://localhost:6380

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-${{ matrix.python-version }}
        path: |
          *-pytest-report.html
          *-pytest-report.xml
          pytest-report.html
          pytest-report.xml
          *-htmlcov/
          htmlcov/
          *-coverage.xml
          coverage.xml
          bandit-report.json
          safety-report.json

    - name: Performance benchmark
      run: |
        pytest tests/performance/ \
          --benchmark-only \
          --benchmark-json=benchmark-report.json
      continue-on-error: true

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: benchmark-report-${{ matrix.python-version }}
        path: benchmark-report.json

  integration-tests:
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: devpocket_test
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6380:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y redis-tools postgresql-client

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Wait for services
      run: |
        while ! pg_isready -h localhost -p 5433 -U test; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        
        while ! redis-cli -h localhost -p 6380 ping; do
          echo "Waiting for Redis..."
          sleep 2
        done
        
        echo "Services are ready!"

    - name: Run integration tests
      run: |
        pytest tests/integration/ \
          -v \
          --tb=short \
          --maxfail=5
      env:
        DATABASE_URL: postgresql://test:test@localhost:5433/devpocket_test
        REDIS_URL: redis://localhost:6380

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep

    - name: Run Bandit security scan
      run: |
        bandit -r app/ -f json -o bandit-results.json
      continue-on-error: true

    - name: Run Safety dependency scan
      run: |
        safety check --json --output safety-results.json
      continue-on-error: true

    - name: Run Semgrep security scan
      run: |
        semgrep --config=auto app/ --json -o semgrep-results.json
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-results.json
          safety-results.json
          semgrep-results.json

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: devpocket-api:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm \
          -e ENVIRONMENT=test \
          -e DATABASE_URL=sqlite:///test.db \
          devpocket-api:test \
          python -c "import app; print('Docker image works!')"

  quality-gates:
    runs-on: ubuntu-latest
    needs: [test, integration-tests, security-scan]
    
    steps:
    - name: Download test artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: test-reports-*
        merge-multiple: true

    - name: Check test results
      run: |
        echo "Checking test results and coverage..."
        
        # Parse coverage from XML report
        if [ -f coverage.xml ]; then
          coverage=$(grep -o 'line-rate="[^"]*"' coverage.xml | head -1 | cut -d'"' -f2)
          coverage_percent=$(python -c "print(f'{float('$coverage') * 100:.1f}%')")
          echo "Coverage: $coverage_percent"
          
          if (( $(echo "$coverage < 0.8" | bc -l) )); then
            echo "❌ Coverage below 80% threshold"
            exit 1
          else
            echo "✅ Coverage meets 80% threshold"
          fi
        fi
        
        echo "✅ All quality gates passed!"

  notify:
    runs-on: ubuntu-latest
    needs: [test, integration-tests, security-scan, docker-build, quality-gates]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.quality-gates.result == 'success'
      run: |
        echo "🎉 All tests passed! Ready for deployment."
    
    - name: Notify on failure
      if: needs.quality-gates.result == 'failure'
      run: |
        echo "❌ Tests failed. Please check the results."
        exit 1