# DevPocket API - Python Project Configuration
# This file centralizes configuration for all Python development tools

[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "devpocket-api"
description = "AI-powered mobile terminal application backend"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "DevPocket Team"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Framework :: FastAPI",
]
requires-python = ">=3.11"
dynamic = ["version"]

[tool.setuptools_scm]
write_to = "app/_version.py"

# Black Configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    migrations
    | __pycache__
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
)/
'''

# Ruff Configuration
[tool.ruff]
# Same as Black
line-length = 88
target-version = "py311"

# Enable specific rule sets
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q",   # flake8-quotes
    "FLY", # flynt
    "PERF", # perflint
    "RUF", # ruff-specific rules
]

# Ignore specific rules
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "B905",  # zip without an explicit strict parameter
    "C901",  # too complex
    "W191",  # indentation contains tabs
    "E111",  # indentation is not a multiple of 4
    "E114",  # indentation is not a multiple of 4 (comment)
    "E117",  # over-indented
    "Q000",  # bad quotes inline string
    "Q001",  # bad quotes multiline string
    "Q002",  # bad quotes docstring
    "Q003",  # avoidable escaped quote
]

# Exclude directories
exclude = [
    "migrations",
    "__pycache__",
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "venv",
    "build",
    "dist",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/*" = ["ARG", "S101"]  # Allow unused arguments and assert in tests

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["app", "tests"]
known-third-party = ["fastapi", "pydantic", "sqlalchemy", "alembic"]

# MyPy Configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_error_context = true
pretty = true

# Exclude directories
exclude = [
    "migrations/",
    "__pycache__/",
    ".venv/",
    "venv/",
    "build/",
    "dist/",
]

# Module-specific configurations
[[tool.mypy.overrides]]
module = [
    "paramiko.*",
    "pexpect.*",
    "redis.*",
    "asyncpg.*",
    "pytest.*",
    "factory_boy.*",
    "faker.*",
]
ignore_missing_imports = true

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=80",
    "--tb=short",
    "-ra",
    "--disable-warnings",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "auth: marks tests related to authentication",
    "database: marks tests that require database",
    "redis: marks tests that require Redis",
    "ssh: marks tests related to SSH functionality",
    "websocket: marks tests related to WebSocket functionality",
    "ai: marks tests related to AI features",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage Configuration
[tool.coverage.run]
source = ["app"]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "app/_version.py",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Bandit Security Configuration
[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]  # Skip assert_used and paramiko_calls

# isort Configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["migrations/*"]
known_first_party = ["app", "tests"]
known_third_party = ["fastapi", "pydantic", "sqlalchemy", "alembic", "redis", "paramiko"]

# Vulture Configuration (Dead Code Detection)
[tool.vulture]
exclude = ["migrations/", "__pycache__/"]
min_confidence = 80
sort_by_size = true