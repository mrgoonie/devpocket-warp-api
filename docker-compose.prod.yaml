version: '3.8'

services:
  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: devpocket_postgres_prod
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-devpocket_warp_prod}
      POSTGRES_USER: ${DATABASE_USER:-devpocket_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./docker/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./docker/pg_hba.conf:/etc/postgresql/pg_hba.conf
    networks:
      - devpocket_prod_network
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-devpocket_user} -d ${DATABASE_NAME:-devpocket_warp_prod}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache (Production)
  redis:
    image: redis:7-alpine
    container_name: devpocket_redis_prod
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_prod_data:/data
      - ./docker/redis.prod.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - devpocket_prod_network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # FastAPI Application (Production with Gunicorn)
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: devpocket_api_prod
    ports:
      - "${APP_PORT:-8000}:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://${DATABASE_USER:-devpocket_user}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME:-devpocket_warp_prod}
      - REDIS_URL=redis://redis:6379/${REDIS_DB:-0}
      - APP_DEBUG=false
      - RELOAD=false
      - WORKERS=${WORKERS:-4}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - OPENROUTER_SITE_URL=${OPENROUTER_SITE_URL}
      - OPENROUTER_APP_NAME=${OPENROUTER_APP_NAME}
    volumes:
      - ./logs:/app/logs
      - ./ssh_keys:/app/ssh_keys
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - devpocket_prod_network
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    command: >
      sh -c "
        echo 'Production startup: Running database migrations...' &&
        alembic upgrade head &&
        echo 'Starting production server with Gunicorn...' &&
        gunicorn main:app 
          --worker-class uvicorn.workers.UvicornWorker 
          --workers ${WORKERS:-4} 
          --worker-connections 1000
          --max-requests 1000
          --max-requests-jitter 100
          --preload
          --bind 0.0.0.0:8000
          --access-logfile -
          --error-logfile -
          --log-level ${LOG_LEVEL:-info}
          --timeout 120
          --keep-alive 5
          --graceful-timeout 30
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: devpocket_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/devpocket.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - api
    networks:
      - devpocket_prod_network
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local

networks:
  devpocket_prod_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# Production deployment with security and monitoring
secrets:
  database_password:
    external: true
  jwt_secret:
    external: true