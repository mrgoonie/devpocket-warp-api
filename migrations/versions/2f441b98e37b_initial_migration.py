"""initial_migration

Revision ID: 2f441b98e37b
Revises: 
Create Date: 2025-08-15 16:48:29.622701

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "2f441b98e37b"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "ssh_keys",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("key_type", sa.String(length=20), nullable=False),
        sa.Column("key_size", sa.Integer(), nullable=True),
        sa.Column("fingerprint", sa.String(length=200), nullable=False),
        sa.Column("encrypted_private_key", sa.LargeBinary(), nullable=False),
        sa.Column("public_key", sa.Text(), nullable=False),
        sa.Column("comment", sa.String(length=255), nullable=True),
        sa.Column(
            "has_passphrase",
            sa.Boolean(),
            server_default="false",
            nullable=False,
        ),
        sa.Column("file_path", sa.String(length=500), nullable=True),
        sa.Column(
            "is_active", sa.Boolean(), server_default="true", nullable=False
        ),
        sa.Column("last_used_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "usage_count", sa.Integer(), server_default="0", nullable=False
        ),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_ssh_keys_created_at"),
        "ssh_keys",
        ["created_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_ssh_keys_fingerprint"),
        "ssh_keys",
        ["fingerprint"],
        unique=True,
    )
    op.create_index(op.f("ix_ssh_keys_id"), "ssh_keys", ["id"], unique=False)
    op.create_index(
        op.f("ix_ssh_keys_updated_at"),
        "ssh_keys",
        ["updated_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_ssh_keys_user_id"), "ssh_keys", ["user_id"], unique=False
    )
    op.create_table(
        "sync_data",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("sync_type", sa.String(length=50), nullable=False),
        sa.Column("sync_key", sa.String(length=255), nullable=False),
        sa.Column("data", sa.JSON(), nullable=False),
        sa.Column("version", sa.Integer(), server_default="1", nullable=False),
        sa.Column(
            "is_deleted", sa.Boolean(), server_default="false", nullable=False
        ),
        sa.Column("source_device_id", sa.String(length=255), nullable=False),
        sa.Column("source_device_type", sa.String(length=20), nullable=False),
        sa.Column("conflict_data", sa.JSON(), nullable=True),
        sa.Column("resolved_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "synced_at",
            sa.DateTime(timezone=True),
            server_default="now()",
            nullable=False,
        ),
        sa.Column(
            "last_modified_at",
            sa.DateTime(timezone=True),
            server_default="now()",
            nullable=False,
        ),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_sync_data_created_at"),
        "sync_data",
        ["created_at"],
        unique=False,
    )
    op.create_index(op.f("ix_sync_data_id"), "sync_data", ["id"], unique=False)
    op.create_index(
        op.f("ix_sync_data_is_deleted"),
        "sync_data",
        ["is_deleted"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sync_data_sync_key"), "sync_data", ["sync_key"], unique=False
    )
    op.create_index(
        op.f("ix_sync_data_sync_type"),
        "sync_data",
        ["sync_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sync_data_synced_at"),
        "sync_data",
        ["synced_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sync_data_updated_at"),
        "sync_data",
        ["updated_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sync_data_user_id"), "sync_data", ["user_id"], unique=False
    )
    op.create_table(
        "user_settings",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column(
            "terminal_theme",
            sa.String(length=50),
            server_default="dark",
            nullable=False,
        ),
        sa.Column(
            "terminal_font_size",
            sa.Integer(),
            server_default="14",
            nullable=False,
        ),
        sa.Column(
            "terminal_font_family",
            sa.String(length=50),
            server_default="Fira Code",
            nullable=False,
        ),
        sa.Column(
            "preferred_ai_model",
            sa.String(length=100),
            server_default="claude-3-haiku",
            nullable=False,
        ),
        sa.Column(
            "ai_suggestions_enabled",
            sa.Boolean(),
            server_default="true",
            nullable=False,
        ),
        sa.Column(
            "ai_explanations_enabled",
            sa.Boolean(),
            server_default="true",
            nullable=False,
        ),
        sa.Column(
            "sync_enabled", sa.Boolean(), server_default="true", nullable=False
        ),
        sa.Column(
            "sync_commands",
            sa.Boolean(),
            server_default="true",
            nullable=False,
        ),
        sa.Column(
            "sync_ssh_profiles",
            sa.Boolean(),
            server_default="true",
            nullable=False,
        ),
        sa.Column("custom_settings", sa.JSON(), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_user_settings_created_at"),
        "user_settings",
        ["created_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_user_settings_id"), "user_settings", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_user_settings_updated_at"),
        "user_settings",
        ["updated_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_user_settings_user_id"),
        "user_settings",
        ["user_id"],
        unique=False,
    )
    op.create_table(
        "commands",
        sa.Column("session_id", sa.UUID(), nullable=False),
        sa.Column("command", sa.Text(), nullable=False),
        sa.Column("output", sa.Text(), nullable=True),
        sa.Column("error_output", sa.Text(), nullable=True),
        sa.Column("exit_code", sa.Integer(), nullable=True),
        sa.Column(
            "status",
            sa.String(length=20),
            server_default="pending",
            nullable=False,
        ),
        sa.Column("started_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("execution_time", sa.Float(), nullable=True),
        sa.Column("working_directory", sa.String(length=500), nullable=True),
        sa.Column("environment_vars", sa.Text(), nullable=True),
        sa.Column(
            "was_ai_suggested",
            sa.Boolean(),
            server_default="false",
            nullable=False,
        ),
        sa.Column("ai_explanation", sa.Text(), nullable=True),
        sa.Column("command_type", sa.String(length=50), nullable=True),
        sa.Column(
            "is_sensitive",
            sa.Boolean(),
            server_default="false",
            nullable=False,
        ),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["session_id"], ["sessions.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_commands_ai_suggested",
        "commands",
        ["was_ai_suggested", "created_at"],
        unique=False,
    )
    op.create_index(
        "idx_commands_session_created",
        "commands",
        ["session_id", "created_at"],
        unique=False,
    )
    op.create_index(
        "idx_commands_status_created",
        "commands",
        ["status", "created_at"],
        unique=False,
    )
    op.create_index(
        "idx_commands_user_command",
        "commands",
        ["session_id", "command"],
        unique=False,
    )
    op.create_index(
        op.f("ix_commands_command"), "commands", ["command"], unique=False
    )
    op.create_index(
        op.f("ix_commands_command_type"),
        "commands",
        ["command_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_commands_created_at"),
        "commands",
        ["created_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_commands_exit_code"), "commands", ["exit_code"], unique=False
    )
    op.create_index(op.f("ix_commands_id"), "commands", ["id"], unique=False)
    op.create_index(
        op.f("ix_commands_session_id"),
        "commands",
        ["session_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_commands_status"), "commands", ["status"], unique=False
    )
    op.create_index(
        op.f("ix_commands_updated_at"),
        "commands",
        ["updated_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_commands_was_ai_suggested"),
        "commands",
        ["was_ai_suggested"],
        unique=False,
    )
    op.create_table(
        "ssh_profiles",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("host", sa.String(length=255), nullable=False),
        sa.Column("port", sa.Integer(), server_default="22", nullable=False),
        sa.Column("username", sa.String(length=100), nullable=False),
        sa.Column(
            "auth_method",
            sa.String(length=20),
            server_default="key",
            nullable=False,
        ),
        sa.Column("ssh_key_id", sa.UUID(), nullable=True),
        sa.Column(
            "compression", sa.Boolean(), server_default="true", nullable=False
        ),
        sa.Column(
            "strict_host_key_checking",
            sa.Boolean(),
            server_default="true",
            nullable=False,
        ),
        sa.Column(
            "connection_timeout",
            sa.Integer(),
            server_default="30",
            nullable=False,
        ),
        sa.Column("ssh_options", sa.Text(), nullable=True),
        sa.Column(
            "is_active", sa.Boolean(), server_default="true", nullable=False
        ),
        sa.Column("last_used_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "connection_count",
            sa.Integer(),
            server_default="0",
            nullable=False,
        ),
        sa.Column(
            "successful_connections",
            sa.Integer(),
            server_default="0",
            nullable=False,
        ),
        sa.Column(
            "failed_connections",
            sa.Integer(),
            server_default="0",
            nullable=False,
        ),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["ssh_key_id"], ["ssh_keys.id"], ondelete="SET NULL"
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_ssh_profiles_created_at"),
        "ssh_profiles",
        ["created_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_ssh_profiles_id"), "ssh_profiles", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_ssh_profiles_ssh_key_id"),
        "ssh_profiles",
        ["ssh_key_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_ssh_profiles_updated_at"),
        "ssh_profiles",
        ["updated_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_ssh_profiles_user_id"),
        "ssh_profiles",
        ["user_id"],
        unique=False,
    )
    op.drop_index(
        "idx_workflows_tags", table_name="workflows", postgresql_using="gin"
    )
    op.drop_index("idx_workflows_user_id", table_name="workflows")
    op.drop_table("workflows")
    op.drop_index("idx_sync_queue_user_device", table_name="sync_queue")
    op.drop_table("sync_queue")
    op.drop_index(
        "idx_command_history_executed_at", table_name="command_history"
    )
    op.drop_index("idx_command_history_user_id", table_name="command_history")
    op.drop_table("command_history")
    op.drop_index("idx_ssh_connections_user_id", table_name="ssh_connections")
    op.drop_table("ssh_connections")
    op.add_column(
        "sessions",
        sa.Column("device_id", sa.String(length=255), nullable=False),
    )
    op.add_column(
        "sessions",
        sa.Column("device_type", sa.String(length=20), nullable=False),
    )
    op.add_column(
        "sessions",
        sa.Column("device_name", sa.String(length=100), nullable=True),
    )
    op.add_column(
        "sessions",
        sa.Column("session_name", sa.String(length=100), nullable=True),
    )
    op.add_column(
        "sessions",
        sa.Column(
            "session_type",
            sa.String(length=20),
            server_default="terminal",
            nullable=False,
        ),
    )
    op.add_column(
        "sessions", sa.Column("user_agent", sa.Text(), nullable=True)
    )
    op.add_column(
        "sessions",
        sa.Column(
            "is_active", sa.Boolean(), server_default="true", nullable=False
        ),
    )
    op.add_column(
        "sessions",
        sa.Column(
            "last_activity_at", sa.DateTime(timezone=True), nullable=True
        ),
    )
    op.add_column(
        "sessions",
        sa.Column("ended_at", sa.DateTime(timezone=True), nullable=True),
    )
    op.add_column(
        "sessions", sa.Column("ssh_host", sa.String(length=255), nullable=True)
    )
    op.add_column(
        "sessions", sa.Column("ssh_port", sa.Integer(), nullable=True)
    )
    op.add_column(
        "sessions",
        sa.Column("ssh_username", sa.String(length=100), nullable=True),
    )
    op.add_column(
        "sessions",
        sa.Column(
            "terminal_cols", sa.Integer(), server_default="80", nullable=False
        ),
    )
    op.add_column(
        "sessions",
        sa.Column(
            "terminal_rows", sa.Integer(), server_default="24", nullable=False
        ),
    )
    op.add_column(
        "sessions",
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
    )
    op.alter_column(
        "sessions",
        "ip_address",
        existing_type=postgresql.INET(),
        type_=sa.String(length=45),
        existing_nullable=True,
    )
    op.alter_column(
        "sessions",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.drop_index("idx_sessions_token_hash", table_name="sessions")
    op.drop_index("idx_sessions_user_id", table_name="sessions")
    op.drop_constraint("sessions_token_hash_key", "sessions", type_="unique")
    op.create_index(
        op.f("ix_sessions_created_at"),
        "sessions",
        ["created_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sessions_device_id"), "sessions", ["device_id"], unique=False
    )
    op.create_index(
        op.f("ix_sessions_device_type"),
        "sessions",
        ["device_type"],
        unique=False,
    )
    op.create_index(op.f("ix_sessions_id"), "sessions", ["id"], unique=False)
    op.create_index(
        op.f("ix_sessions_is_active"), "sessions", ["is_active"], unique=False
    )
    op.create_index(
        op.f("ix_sessions_last_activity_at"),
        "sessions",
        ["last_activity_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sessions_updated_at"),
        "sessions",
        ["updated_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sessions_user_id"), "sessions", ["user_id"], unique=False
    )
    op.drop_column("sessions", "last_activity")
    op.drop_column("sessions", "device_info")
    op.drop_column("sessions", "expires_at")
    op.drop_column("sessions", "token_hash")
    op.alter_column(
        "users",
        "username",
        existing_type=sa.VARCHAR(length=100),
        type_=sa.String(length=50),
        existing_nullable=False,
    )
    op.alter_column(
        "users",
        "role",
        existing_type=postgresql.ENUM(
            "user", "admin", "premium", name="user_role"
        ),
        nullable=False,
        existing_server_default=sa.text("'user'::user_role"),
    )
    op.alter_column(
        "users",
        "is_active",
        existing_type=sa.BOOLEAN(),
        nullable=False,
        existing_server_default=sa.text("true"),
    )
    op.alter_column(
        "users",
        "is_verified",
        existing_type=sa.BOOLEAN(),
        nullable=False,
        existing_server_default=sa.text("false"),
    )
    op.alter_column(
        "users",
        "reset_token_expires",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "users",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.drop_index("idx_users_email", table_name="users")
    op.drop_index("idx_users_username", table_name="users")
    op.drop_constraint("users_email_key", "users", type_="unique")
    op.drop_constraint("users_username_key", "users", type_="unique")
    op.create_index(
        op.f("ix_users_created_at"), "users", ["created_at"], unique=False
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_index(
        op.f("ix_users_updated_at"), "users", ["updated_at"], unique=False
    )
    op.create_index(
        op.f("ix_users_username"), "users", ["username"], unique=True
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_users_username"), table_name="users")
    op.drop_index(op.f("ix_users_updated_at"), table_name="users")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_index(op.f("ix_users_created_at"), table_name="users")
    op.create_unique_constraint("users_username_key", "users", ["username"])
    op.create_unique_constraint("users_email_key", "users", ["email"])
    op.create_index("idx_users_username", "users", ["username"], unique=False)
    op.create_index("idx_users_email", "users", ["email"], unique=False)
    op.alter_column(
        "users",
        "updated_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "users",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "users",
        "reset_token_expires",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "is_verified",
        existing_type=sa.BOOLEAN(),
        nullable=True,
        existing_server_default=sa.text("false"),
    )
    op.alter_column(
        "users",
        "is_active",
        existing_type=sa.BOOLEAN(),
        nullable=True,
        existing_server_default=sa.text("true"),
    )
    op.alter_column(
        "users",
        "role",
        existing_type=postgresql.ENUM(
            "user", "admin", "premium", name="user_role"
        ),
        nullable=True,
        existing_server_default=sa.text("'user'::user_role"),
    )
    op.alter_column(
        "users",
        "username",
        existing_type=sa.String(length=50),
        type_=sa.VARCHAR(length=100),
        existing_nullable=False,
    )
    op.add_column(
        "sessions",
        sa.Column(
            "token_hash",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "sessions",
        sa.Column(
            "expires_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "sessions",
        sa.Column(
            "device_info",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "sessions",
        sa.Column(
            "last_activity",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_index(op.f("ix_sessions_user_id"), table_name="sessions")
    op.drop_index(op.f("ix_sessions_updated_at"), table_name="sessions")
    op.drop_index(op.f("ix_sessions_last_activity_at"), table_name="sessions")
    op.drop_index(op.f("ix_sessions_is_active"), table_name="sessions")
    op.drop_index(op.f("ix_sessions_id"), table_name="sessions")
    op.drop_index(op.f("ix_sessions_device_type"), table_name="sessions")
    op.drop_index(op.f("ix_sessions_device_id"), table_name="sessions")
    op.drop_index(op.f("ix_sessions_created_at"), table_name="sessions")
    op.create_unique_constraint(
        "sessions_token_hash_key", "sessions", ["token_hash"]
    )
    op.create_index(
        "idx_sessions_user_id", "sessions", ["user_id"], unique=False
    )
    op.create_index(
        "idx_sessions_token_hash", "sessions", ["token_hash"], unique=False
    )
    op.alter_column(
        "sessions",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "sessions",
        "ip_address",
        existing_type=sa.String(length=45),
        type_=postgresql.INET(),
        existing_nullable=True,
    )
    op.drop_column("sessions", "updated_at")
    op.drop_column("sessions", "terminal_rows")
    op.drop_column("sessions", "terminal_cols")
    op.drop_column("sessions", "ssh_username")
    op.drop_column("sessions", "ssh_port")
    op.drop_column("sessions", "ssh_host")
    op.drop_column("sessions", "ended_at")
    op.drop_column("sessions", "last_activity_at")
    op.drop_column("sessions", "is_active")
    op.drop_column("sessions", "user_agent")
    op.drop_column("sessions", "session_type")
    op.drop_column("sessions", "session_name")
    op.drop_column("sessions", "device_name")
    op.drop_column("sessions", "device_type")
    op.drop_column("sessions", "device_id")
    op.create_table(
        "ssh_connections",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "name", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "host", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "port",
            sa.INTEGER(),
            server_default=sa.text("22"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "username",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("ssh_key", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "passphrase",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "is_default",
            sa.BOOLEAN(),
            server_default=sa.text("false"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "last_used",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name="ssh_connections_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="ssh_connections_pkey"),
        sa.UniqueConstraint(
            "user_id", "name", name="ssh_connections_user_id_name_key"
        ),
        postgresql_ignore_search_path=False,
    )
    op.create_index(
        "idx_ssh_connections_user_id",
        "ssh_connections",
        ["user_id"],
        unique=False,
    )
    op.create_table(
        "command_history",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "connection_id", sa.UUID(), autoincrement=False, nullable=True
        ),
        sa.Column("command", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("output", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "exit_code", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "executed_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "device_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "sync_status",
            postgresql.ENUM(
                "pending", "synced", "conflict", name="sync_status"
            ),
            server_default=sa.text("'pending'::sync_status"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["connection_id"],
            ["ssh_connections.id"],
            name="command_history_connection_id_fkey",
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name="command_history_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="command_history_pkey"),
    )
    op.create_index(
        "idx_command_history_user_id",
        "command_history",
        ["user_id"],
        unique=False,
    )
    op.create_index(
        "idx_command_history_executed_at",
        "command_history",
        [sa.text("executed_at DESC")],
        unique=False,
    )
    op.create_table(
        "sync_queue",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "device_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "action",
            sa.VARCHAR(length=50),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "data",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "synced",
            sa.BOOLEAN(),
            server_default=sa.text("false"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name="sync_queue_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="sync_queue_pkey"),
    )
    op.create_index(
        "idx_sync_queue_user_device",
        "sync_queue",
        ["user_id", "device_id"],
        unique=False,
    )
    op.create_table(
        "workflows",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "name", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "description", sa.TEXT(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "commands",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "tags",
            postgresql.ARRAY(sa.TEXT()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "is_public",
            sa.BOOLEAN(),
            server_default=sa.text("false"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name="workflows_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="workflows_pkey"),
        sa.UniqueConstraint(
            "user_id", "name", name="workflows_user_id_name_key"
        ),
    )
    op.create_index(
        "idx_workflows_user_id", "workflows", ["user_id"], unique=False
    )
    op.create_index(
        "idx_workflows_tags",
        "workflows",
        ["tags"],
        unique=False,
        postgresql_using="gin",
    )
    op.drop_index(op.f("ix_ssh_profiles_user_id"), table_name="ssh_profiles")
    op.drop_index(
        op.f("ix_ssh_profiles_updated_at"), table_name="ssh_profiles"
    )
    op.drop_index(
        op.f("ix_ssh_profiles_ssh_key_id"), table_name="ssh_profiles"
    )
    op.drop_index(op.f("ix_ssh_profiles_id"), table_name="ssh_profiles")
    op.drop_index(
        op.f("ix_ssh_profiles_created_at"), table_name="ssh_profiles"
    )
    op.drop_table("ssh_profiles")
    op.drop_index(op.f("ix_commands_was_ai_suggested"), table_name="commands")
    op.drop_index(op.f("ix_commands_updated_at"), table_name="commands")
    op.drop_index(op.f("ix_commands_status"), table_name="commands")
    op.drop_index(op.f("ix_commands_session_id"), table_name="commands")
    op.drop_index(op.f("ix_commands_id"), table_name="commands")
    op.drop_index(op.f("ix_commands_exit_code"), table_name="commands")
    op.drop_index(op.f("ix_commands_created_at"), table_name="commands")
    op.drop_index(op.f("ix_commands_command_type"), table_name="commands")
    op.drop_index(op.f("ix_commands_command"), table_name="commands")
    op.drop_index("idx_commands_user_command", table_name="commands")
    op.drop_index("idx_commands_status_created", table_name="commands")
    op.drop_index("idx_commands_session_created", table_name="commands")
    op.drop_index("idx_commands_ai_suggested", table_name="commands")
    op.drop_table("commands")
    op.drop_index(op.f("ix_user_settings_user_id"), table_name="user_settings")
    op.drop_index(
        op.f("ix_user_settings_updated_at"), table_name="user_settings"
    )
    op.drop_index(op.f("ix_user_settings_id"), table_name="user_settings")
    op.drop_index(
        op.f("ix_user_settings_created_at"), table_name="user_settings"
    )
    op.drop_table("user_settings")
    op.drop_index(op.f("ix_sync_data_user_id"), table_name="sync_data")
    op.drop_index(op.f("ix_sync_data_updated_at"), table_name="sync_data")
    op.drop_index(op.f("ix_sync_data_synced_at"), table_name="sync_data")
    op.drop_index(op.f("ix_sync_data_sync_type"), table_name="sync_data")
    op.drop_index(op.f("ix_sync_data_sync_key"), table_name="sync_data")
    op.drop_index(op.f("ix_sync_data_is_deleted"), table_name="sync_data")
    op.drop_index(op.f("ix_sync_data_id"), table_name="sync_data")
    op.drop_index(op.f("ix_sync_data_created_at"), table_name="sync_data")
    op.drop_table("sync_data")
    op.drop_index(op.f("ix_ssh_keys_user_id"), table_name="ssh_keys")
    op.drop_index(op.f("ix_ssh_keys_updated_at"), table_name="ssh_keys")
    op.drop_index(op.f("ix_ssh_keys_id"), table_name="ssh_keys")
    op.drop_index(op.f("ix_ssh_keys_fingerprint"), table_name="ssh_keys")
    op.drop_index(op.f("ix_ssh_keys_created_at"), table_name="ssh_keys")
    op.drop_table("ssh_keys")
    # ### end Alembic commands ###
