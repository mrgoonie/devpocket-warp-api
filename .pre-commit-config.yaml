# DevPocket API - Pre-commit Configuration
# This file configures pre-commit hooks to automatically run Black formatting
# and other code quality tools before each commit.

repos:
  # Black - Code formatter
  - repo: https://github.com/psf/black
    rev: 23.11.0  # Use the same version as in requirements.txt
    hooks:
      - id: black
        name: Black Python Code Formatter
        description: "Format Python code using Black"
        args: 
          - --line-length=88
          - --target-version=py311
        exclude: ^migrations/
        types: [python]

  # Ruff - Linter and formatter
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.6  # Use the same version as in requirements.txt
    hooks:
      # Ruff linter
      - id: ruff
        name: Ruff Python Linter
        description: "Run Ruff linter"
        args: [--fix, --exit-non-zero-on-fix]
        exclude: ^migrations/
        types: [python]
      
      # Ruff formatter (alternative to Black, but we'll keep Black as primary)
      - id: ruff-format
        name: Ruff Python Formatter
        description: "Run Ruff formatter"
        exclude: ^migrations/
        types: [python]

  # Built-in pre-commit hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # File formatting
      - id: trailing-whitespace
        name: Trim Trailing Whitespace
        description: "Remove trailing whitespace"
        exclude: ^migrations/
        
      - id: end-of-file-fixer
        name: Fix End of Files
        description: "Ensure files end with a newline"
        exclude: ^migrations/
        
      - id: mixed-line-ending
        name: Fix Mixed Line Endings
        description: "Replace mixed line endings with LF"
        args: [--fix=lf]
        exclude: ^migrations/

      # Python-specific hooks
      - id: check-ast
        name: Check Python AST
        description: "Check Python files for syntax errors"
        types: [python]
        exclude: ^migrations/
        
      - id: check-builtin-literals
        name: Check Builtin Literals
        description: "Check for builtin type constructor use"
        types: [python]
        exclude: ^migrations/
        
      - id: debug-statements
        name: Debug Statements (Python)
        description: "Check for debugger imports and breakpoints"
        types: [python]
        exclude: ^migrations/

      # General file checks
      - id: check-added-large-files
        name: Check for Large Files
        description: "Prevent large files from being committed"
        args: [--maxkb=500]
        
      - id: check-case-conflict
        name: Check Case Conflict
        description: "Check for files with case conflicts"
        
      - id: check-merge-conflict
        name: Check Merge Conflict
        description: "Check for merge conflict markers"
        
      - id: check-yaml
        name: Check YAML
        description: "Check YAML file syntax"
        types: [yaml]
        
      - id: check-json
        name: Check JSON
        description: "Check JSON file syntax"
        types: [json]
        
      - id: check-toml
        name: Check TOML
        description: "Check TOML file syntax"
        types: [toml]

  # Security checks
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        name: Bandit Security Linter
        description: "Find common security issues in Python code"
        args: [--skip, B101,B601]  # Skip assert and shell usage tests
        exclude: ^(tests/|migrations/)
        types: [python]

# Configuration for pre-commit
default_stages: [commit]
fail_fast: false  # Run all hooks even if one fails
minimum_pre_commit_version: 3.0.0

# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false